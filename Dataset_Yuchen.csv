text,code
"write a python program to sort an array in ascending order using bubble sort
","def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [9,4,3,5,6,1,2,7]
print(bubbleSort(arr))




"
"write a python program to sort an array in descending order using bubble sort
","def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]<array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [9,4,3,5,6,1,2,7]
print(bubbleSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using bubble sort, assume that this element always exists in the array
","def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [2,2,1,1,1,2,2]
arr = bubbleSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using bubble sort
","def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [1,2,3,1]
arr = bubbleSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using bubble sort
","def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [2,2,3,1]
arr = bubbleSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using selection sort
","def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [9,4,3,5,6,1,2,7]
print(selectionSort(arr))




"
"write a python program to sort an array in descending order using selection sort
","def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] > array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [9,4,3,5,6,1,2,7]
print(selectionSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using selection sort, assume that this element always exists in the array
","def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [2,2,1,1,1,2,2]
arr = selectionSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using selection sort
","def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [1,2,3,1]
arr = selectionSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using selection sort
","def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [2,2,3,1]
arr = selectionSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using insertion sort
","def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [9,4,3,5,6,1,2,7]
print(insertionSort(arr))




"
"write a python program to sort an array in descending order using insertion sort
","def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] < key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [9,4,3,5,6,1,2,7]
print(insertionSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using insertion sort, assume that this element always exists in the array
","def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [2,2,1,1,1,2,2]
arr = insertionSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using insertion sort
","def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [1,2,3,1]
arr = insertionSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using insertion sort
","def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [2,2,3,1]
arr = insertionSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using shell sort
","import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [9,4,3,5,6,1,2,7]
print(shellSort(arr))




"
"write a python program to sort an array in descending order using shell sort
","import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] < temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [9,4,3,5,6,1,2,7]
print(shellSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using shell sort, assume that this element always exists in the array
","import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [2,2,1,1,1,2,2]
arr = shellSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using shell sort
","import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [1,2,3,1]
arr = shellSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using shell sort
","import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [2,2,3,1]
arr = shellSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using heap sort
","def heapify(array, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        largest = l
    if r < n and array[largest] < array[r]:
        largest = r
    if largest != i:
        array[i], array[largest] = array[largest], array[i]
        heapify(array, n, largest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [9,4,3,5,6,1,2,7]
print(heapSort(arr))




"
"write a python program to sort an array in descending order using heap sort
","def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] > array[l]:
        smallest = l
    if r < n and array[smallest] > array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [9,4,3,5,6,1,2,7]
print(heapSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using shell sort, assume that this element always exists in the array
","def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [2,2,1,1,1,2,2]
arr = heapSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using heap sort
","def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [1,2,3,1]
arr = heapSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using heap sort
","def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [2,2,3,1]
arr = heapSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using heap sort
","def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [9,4,3,5,6,1,2,7]
print(mergeSort(arr))




"
"write a python program to sort an array in descending order using merge sort
","def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]>lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [9,4,3,5,6,1,2,7]
print(mergeSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using merge sort, assume that this element always exists in the array
","def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [2,2,1,1,1,2,2]
arr = mergeSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using merge sort
","def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [1,2,3,1]
arr = mergeSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using merge sort
","def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [2,2,3,1]
arr = mergeSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using quick sort
","def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [9,4,3,5,6,1,2,7]
print(quickSort(arr))




"
"write a python program to sort an array in descending order using quick sort
","def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item < pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [9,4,3,5,6,1,2,7]
print(quickSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using quick sort, assume that this element always exists in the array
","def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [2,2,1,1,1,2,2]
arr = quickSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using quick sort
","def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [1,2,3,1]
arr = quickSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using quick sort
","def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [2,2,3,1]
arr = quickSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using counting sort
","def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [9,4,3,5,6,1,2,7]
print(countSort(arr))




"
"write a python program to sort an array in descending order using counting sort
","def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array[::-1]
arr = [9,4,3,5,6,1,2,7]
print(countSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using counting sort, assume that this element always exists in the array
","def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [2,2,1,1,1,2,2]
arr = countSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using counting sort
","def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [1,2,3,1]
arr = countSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using counting sort
","def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [2,2,3,1]
arr = countSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using radix sort
","import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [9,4,3,5,6,1,2,7]
print(radixSort(arr))




"
"write a python program to sort an array in descending order using radix sort
","import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array[::-1]
arr = [9,4,3,5,6,1,2,7]
print(radixSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using radix sort, assume that this element always exists in the array
","import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [2,2,1,1,1,2,2]
arr = radixSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using radix sort
","import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [1,2,3,1]
arr = radixSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
"write a python program to find the third distinct maximum number in this array using radix sort
","import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [2,2,3,1]
arr = radixSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
"write a python program to sort an array in ascending order using bucket sort
","def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [9,4,3,5,6,1,2,7]
print(bucketSort(arr))




"
"write a python program to sort an array in descending order using bucket sort
","def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result[::-1]
arr = [9,4,3,5,6,1,2,7]
print(bucketSort(arr))




"
"write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using bucket sort, assume that this element always exists in the array
","def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [2,2,1,1,1,2,2]
arr = bucketSort(arr)
print(arr[len(arr)//2])




"
"write a python program to check if any value appears at least twice in the array using bucket sort
","def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [1,2,3,1]
arr = bucketSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
