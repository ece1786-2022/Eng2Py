text,code
"3 Write a program to find the element that appears more than ⌊n / 2⌋ times in an array using Bubble Sort, assume that this element always exists in the array","def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [2,2,1,1,1,2,2]
arr = bubbleSort(arr)
print(arr[len(arr)//2])








"
5 write a python program to find the third maximum number which is distinct in an array using bubble sort,"def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [2,2,3,1]
arr = bubbleSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
6 Write a program to find the maximum product of three numbers in an array using bubble sort,"def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [1,2,3,4]
arr = bubbleSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"7 write a python program to find the largest perimeter of a triangle with a non-zero area, with three lengths from an array using Bubble Sort","def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [2,1,2]
arr = bubbleSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
8 write a Python program to print an array of the squares of each number sorted in increasing order of a given array using bubble sort,"def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(bubbleSort(arr))








"
9 Write a program to find the mean of the remaining integers after removing the first 5% and the last 5% of the elements in an array using Bubble Sort,"def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = bubbleSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
10 write a program to find out how many numbers are smaller than each element in the array using bubble sort,"def bubbleSort(array):
    swapped = False
    for i in range(len(array)-1,0,-1):
        for j in range(i):
            if array[j]>array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
                swapped= True
        if swapped:
            swapped=False
        else:
            break
    return array
arr = [6,5,4,8]
arr2 = bubbleSort(arr.copy())
print([arr2.index(i) for i in arr])








"
11 write a Python program to sort an array in non-decreasing order using Selection Sort,"def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [9,4,3,5,6,1,2,7]
print(selectionSort(arr))








"
14 write a python program to check if any array value appears at least twice using selection sort,"def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [1,2,3,1]
arr = selectionSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
16 Write a program to find three numbers whose product is maximum in an array using Selection Sort,"def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [1,2,3,4]
arr = selectionSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"17 write a python program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using Selection Sort","def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [2,1,2]
arr = selectionSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
18 Write a Python program to print an array of the squares of each element sorted in ascending order of a given array using selection sort,"def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(selectionSort(arr))








"
19 write a Python program to find the mean of the remaining elements after removing the smallest 5% and the largest 5% of the elements in an array using Selection Sort,"def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = selectionSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
20 write a program to find out how many numbers are smaller than each number in the array using selection sort,"def selectionSort(array):
    for i in range(len(array)-1):
        min_idx = i
        for idx in range(i + 1, len(array)):
            if array[idx] < array[min_idx]:
                min_idx = idx
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
arr = [6,5,4,8]
arr2 = selectionSort(arr.copy())
print([arr2.index(i) for i in arr])








"
21 write a program to sort an array in non-decreasing order using Insertion Sort,"def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [9,4,3,5,6,1,2,7]
print(insertionSort(arr))








"
22 write a python program to sort an array in descending order using Insertion Sort,"def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] < key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [9,4,3,5,6,1,2,7]
print(insertionSort(arr))








"
25 Write a Python program to find the third distinct maximum number in this array using insertion sort,"def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [2,2,3,1]
arr = insertionSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
"27 Write a python program to find the largest perimeter of a triangle with a non-zero area, with three lengths from an array using insertion sort","def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [2,1,2]
arr = insertionSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
28 write a program to print an array of the squares of each element sorted in non-decreasing order of a given array using Insertion Sort,"def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(insertionSort(arr))








"
29 write a program to find the mean of the remaining integers in an array after removing the first 5% and the last 5% of the elements using insertion sort,"def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = insertionSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
30 Write a Wython program to find out how many numbers in the array are smaller than each element using Insertion Sort,"def insertionSort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i-1
        while array[j] > key and j >= 0:
            array[j+1] = array[j]
            j -= 1
        array[j+1] = key
    return array
arr = [6,5,4,8]
arr2 = insertionSort(arr.copy())
print([arr2.index(i) for i in arr])








"
31 write a program to sort an array in ascending order using Shell Sort,"import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [9,4,3,5,6,1,2,7]
print(shellSort(arr))








"
32 write a python program to sort an array in non-ascending order using Shell Sort,"import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] < temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [9,4,3,5,6,1,2,7]
print(shellSort(arr))








"
"33 Write a program to find the element in an array that appears more than ⌊n / 2⌋ times using shell sort, assume that this element always exists in the array","import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [2,2,1,1,1,2,2]
arr = shellSort(arr)
print(arr[len(arr)//2])








"
36 write a python program to find maximum product of three integers in an array using shell sort,"import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [1,2,3,4]
arr = shellSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
38 write a python program to print an array of the squares of each integer sorted in non-decreasing order of a given array using Shell Sort,"import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(shellSort(arr))








"
39 Write a Python program to find the mean of the remaining numbers after removing the smallest 5% and the largest 5% of the elements in an array using shell sort,"import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = shellSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
40 write a python program to find out how many numbers are smaller than each element in the array using Shell Sort,"import math
def shellSort(array):
    n = len(array)
    k = int(math.log2(n))
    interval = 2**k -1
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval
            array[j] = temp
        k -= 1
        interval = 2**k -1
    return array
arr = [6,5,4,8]
arr2 = shellSort(arr.copy())
print([arr2.index(i) for i in arr])








"
41 Write a python program to sort an array in ascending order using Heap Sort,"def heapify(array, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        largest = l
    if r < n and array[largest] < array[r]:
        largest = r
    if largest != i:
        array[i], array[largest] = array[largest], array[i]
        heapify(array, n, largest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [9,4,3,5,6,1,2,7]
print(heapSort(arr))








"
42 write a program to sort an array in descending order using heap sort,"def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] > array[l]:
        smallest = l
    if r < n and array[smallest] > array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [9,4,3,5,6,1,2,7]
print(heapSort(arr))








"
"43 write a Python program to find the number in an array that appears more than ⌊n / 2⌋ times using Shell Sort, assume that this element always exists in the array","def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [2,2,1,1,1,2,2]
arr = heapSort(arr)
print(arr[len(arr)//2])








"
44 write a python program to check if any element appears at least twice in the array using Heap Sort,"def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [1,2,3,1]
arr = heapSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
"47 Write a program to find the largest perimeter of a triangle formed from three of these lengths in an array, with a non-zero area using heap sort","def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [2,1,2]
arr = heapSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
49 write a program to find the mean of the remaining numbers after removing the smallest 5% and the largest 5% of the elements in an array using heap sort,"def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = heapSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
50 write a python program to find out how many integers in the array are smaller than each element using Heap Sort,"def heapify(array, n, i):
    smallest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and array[i] < array[l]:
        smallest = l
    if r < n and array[smallest] < array[r]:
        smallest = r
    if smallest != i:
        array[i], array[smallest] = array[smallest], array[i]
        heapify(array, n, smallest)
def heapSort(array):
    n = len(array)
    for i in range(n//2, -1, -1):
        heapify(array, n, i)
    for i in range(n-1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    return array
arr = [6,5,4,8]
arr2 = heapSort(arr.copy())
print([arr2.index(i) for i in arr])








"
51 write a program to sort an array in ascending order using merge sort,"def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [9,4,3,5,6,1,2,7]
print(mergeSort(arr))








"
52 Write a Python program to sort an array in descending order using Merge Sort,"def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]>lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [9,4,3,5,6,1,2,7]
print(mergeSort(arr))








"
"53 write a program to find the element that appears more than ⌊n / 2⌋ times in an array using Merge Sort, assume that this element always exists in the array","def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [2,2,1,1,1,2,2]
arr = mergeSort(arr)
print(arr[len(arr)//2])








"
54 write a program to check if any element in the array appears at least twice using merge sort,"def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [1,2,3,1]
arr = mergeSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
55 Write a python program to find the third distinct maximum number in this array using merge sort,"def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [2,2,3,1]
arr = mergeSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
58 write a python program to print an array of the squares of each number sorted in increasing order of a given array using merge sort,"def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(mergeSort(arr))








"
60 write a program to find out how many numbers in the array are smaller than each element using merge sort,"def mergeSort(nums):
    if len(nums)==1:
        return nums
    mid = (len(nums)-1) // 2
    lst1 = mergeSort(nums[:mid+1])
    lst2 = mergeSort(nums[mid+1:])
    result = merge(lst1, lst2)
    return result
def merge(lst1, lst2):
    lst = []
    i = 0
    j = 0
    while(i<=len(lst1)-1 and j<=len(lst2)-1):
        if lst1[i]<lst2[j]:
            lst.append(lst1[i])
            i+=1
        else:
            lst.append(lst2[j])
            j+=1
    if i>len(lst1)-1:
        while(j<=len(lst2)-1):
            lst.append(lst2[j])
            j+=1
    else:
        while(i<=len(lst1)-1):
            lst.append(lst1[i])
            i+=1
    return lst
arr = [6,5,4,8]
arr2 = mergeSort(arr.copy())
print([arr2.index(i) for i in arr])








"
61 write a python program to sort an array in non-descending order using quick sort,"def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [9,4,3,5,6,1,2,7]
print(quickSort(arr))








"
62 write a Python program to sort an array in descending order using Quick Sort,"def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item < pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [9,4,3,5,6,1,2,7]
print(quickSort(arr))








"
"63 write a python program to find the element in an array that appears more than ⌊n / 2⌋ times using quick sort, assume that this element always exists in the array","def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [2,2,1,1,1,2,2]
arr = quickSort(arr)
print(arr[len(arr)//2])








"
64 write a program to check if any element appears at least twice in the array using Quick Sort,"def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [1,2,3,1]
arr = quickSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
65 Write a Python program to find the third distinct maximum number in this array using quick sort,"def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [2,2,3,1]
arr = quickSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
66 write a python program to find three integers in an array whose product is maximum using quick sort,"def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [1,2,3,4]
arr = quickSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
69 write a python program to find the mean of the remaining numbers in an array after removing the first 5% and the last 5% of the elements using quick sort,"def quickSort(array):
    if len(array)> 1:
        pivot=array.pop()
        grtr_lst, equal_lst, smlr_lst = [], [pivot], []
        for item in array:
            if item == pivot:
                equal_lst.append(item)
            elif item > pivot:
                grtr_lst.append(item)
            else:
                smlr_lst.append(item)
        return (quickSort(smlr_lst) + equal_lst + quickSort(grtr_lst))
    else:
        return array
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = quickSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
72 write a python program to sort an array in non-ascending order using counting sort,"def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array[::-1]
arr = [9,4,3,5,6,1,2,7]
print(countSort(arr))








"
74 write a program to check if any value appears at least twice in the array using Counting Sort,"def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [1,2,3,1]
arr = countSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
75 write a python program to find the third maximum number in the array that is distinct using counting sort,"def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [2,2,3,1]
arr = countSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
76 write a program to find three numbers with maximum product in an array using counting sort,"def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [1,2,3,4]
arr = countSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"77 Write a Python program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using Counting Sort","def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [2,1,2]
arr = countSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
79 write a python program to find the mean of the remaining integers in the array after removing the smallest 5% and the largest 5% of the elements using counting sort,"def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = countSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
80 write a program to find out the number of integers in the array that are smaller than each element using counting sort,"def countSort(array):
    i_lower_bound , upper_bound = min(array), max(array)
    lower_bound = i_lower_bound
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item + lb for item in array]
        lower_bound , upper_bound = min(array), max(array)
    counter_array = [0]*(upper_bound-lower_bound+1)
    for item in array:
        counter_array[item-lower_bound] += 1
    pos = 0
    for idx, item in enumerate(counter_array):
        num = idx + lower_bound
        for i in range(item):
            array[pos] = num
            pos += 1
    if i_lower_bound < 0:
        lb = abs(i_lower_bound)
        array = [item - lb for item in array]
    return array
arr = [6,5,4,8]
arr2 = countSort(arr.copy())
print([arr2.index(i) for i in arr])








"
81 write a Python program to sort an array in ascending order using radix sort,"import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [9,4,3,5,6,1,2,7]
print(radixSort(arr))








"
"83 write a python program to find the element that appears more than half of the array size using Radix Sort, assume that this element always exists in the array","import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [2,2,1,1,1,2,2]
arr = radixSort(arr)
print(arr[len(arr)//2])








"
85 write a python program to find the element which is the third distinct maximum number in this array using radix sort,"import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [2,2,3,1]
arr = radixSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
86 write a program to find three numbers whose product is maximum in an array using Radix Sort,"import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [1,2,3,4]
arr = radixSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"87 write a program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using radix sort","import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [2,1,2]
arr = radixSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
88 Write a Python program to print an array of the squares of each number sorted in non-decreasing order of a given array using radix sort,"import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(radixSort(arr))








"
90 write a python program to find out how many numbers are smaller than each element in the array using Radix Sort,"import itertools
def radixSort(array):
    min_num = min(array)
    if min_num < 0:
        lb = abs(min_num)
        array = [item + lb for item in array]
    n_digits = len(str(max(array)))
    for dgt in range(n_digits):
        buckets = [[] for i in range(10)]
        for num in array:
            idx = (num // (10**dgt)) % 10
            buckets[idx].append(num)
        array = list(itertools.chain(*buckets))
    if min_num < 0:
        lb = abs(min_num)
        array = [item - lb for item in array]
    return array
arr = [6,5,4,8]
arr2 = radixSort(arr.copy())
print([arr2.index(i) for i in arr])








"
91 write a program to sort an array in ascending order using bucket sort,"def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [9,4,3,5,6,1,2,7]
print(bucketSort(arr))








"
92 write a program to sort an array in descending order using bucket sort,"def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result[::-1]
arr = [9,4,3,5,6,1,2,7]
print(bucketSort(arr))








"
94 Write a python program to check if any value appears at least twice in the array using bucket sort,"def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [1,2,3,1]
arr = bucketSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
96 Write a program to find three numbers in an array with maximum product using bucket sort,"def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [1,2,3,4]
arr = bucketSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"97 write a program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using Bucket Sort","def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [2,1,2]
arr = bucketSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
98 write a python program to print an array of the squares of each number sorted in ascending order of a given array using Bucket Sort,"def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(bucketSort(arr))








"
99 write a python program to find the mean of the remaining integers after removing the first 5% and the last 5% of the elements in an array using bucket sort,"def bucketSort(array):
    largest = max(array)
    length = len(array)
    size = largest/length
    buckets = [[] for i in range(length)]
    for i in range(length):
        index = int(array[i]/size)
        if index != length:
            buckets[index].append(array[i])
        else:
            buckets[length - 1].append(array[i])
    for i in range(len(array)):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = bucketSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
102 write a program to sort an array in descending order using Random Pivot Quick Sort,"import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] > pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1


def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (A[left], A[pivot])
        pivot_index = partition(A, left, right)
        quick_sort_random(A, left, pivot_index)
        quick_sort_random(A, pivot_index + 1, right)


nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)






"
"103 Write a Python program to find the element that appears more than half of the array size using Random Pivot Quick Sort, assume that this element always exists in the array","import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1


def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (A[left], A[pivot])
        pivot_index = partition(A, left, right)
        quick_sort_random(A, left, pivot_index)
        quick_sort_random(A, pivot_index + 1, right)


arr = [2,2,1,1,1,2,2]
quick_sort_random(arr, 0, len(arr))
print(arr[len(arr)//2])








"
105 write a python program to find the third distinct maximum number in this array using random pivot quick sort,"import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1


def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (A[left], A[pivot])
        pivot_index = partition(A, left, right)
        quick_sort_random(A, left, pivot_index)
        quick_sort_random(A, pivot_index + 1, right)


arr = [2,2,3,1]
quick_sort_random(arr, 0, len(arr))
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
"107 write a program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using random pivot quick sort","import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1


def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (A[left], A[pivot])
        pivot_index = partition(A, left, right)
        quick_sort_random(A, left, pivot_index)
        quick_sort_random(A, pivot_index + 1, right)
        
arr = [5,3,2,8]
quick_sort_random(arr, 0, len(arr))
arr = arr[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
108 Write a Python program to print an array of the squares of each integer sorted in non-decreasing order of a given array using Random Pivot Quick Sort,"import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1


def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (A[left], A[pivot])
        pivot_index = partition(A, left, right)
        quick_sort_random(A, left, pivot_index)
        quick_sort_random(A, pivot_index + 1, right)
        
arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
quick_sort_random(arr, 0, len(arr))
print(arr)








"
109 write a program to find the mean of the remaining numbers after removing the smallest 5% and the largest 5% of the elements in an array using Random Pivot Quick Sort,"import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1


def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (A[left], A[pivot])
        pivot_index = partition(A, left, right)
        quick_sort_random(A, left, pivot_index)
        quick_sort_random(A, pivot_index + 1, right)
        
arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
quick_sort_random(arr, 0, len(arr))
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
110 write a python program to find out how many numbers are smaller than each element in the array using Random Pivot Quick Sort,"import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1


def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (A[left], A[pivot])
        pivot_index = partition(A, left, right)
        quick_sort_random(A, left, pivot_index)
        quick_sort_random(A, pivot_index + 1, right)
        
arr = [6,5,4,8]
arr2 = arr.copy()
quick_sort_random(arr2, 0, len(arr2))
print([arr2.index(i) for i in arr])






"
111 Write a python program to sort an array in ascending order using Recursive Bubble Sort,"def rec_bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swap = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swap = True


    return list_data if not swap else rec_bubble_sort(list_data, length - 1)


arr = [9,4,3,5,6,1,2,7]
print(rec_bubble_sort(arr))








"
"113 write a program to find the element that appears more than ⌊n / 2⌋ times in an array using Recursive bubble sort, assume that this element always exists in the array","def rec_bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swap = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swap = True


    return list_data if not swap else rec_bubble_sort(list_data, length - 1)


arr = [2,2,1,1,1,2,2]
arr = rec_bubble_sort(arr)
print(arr[len(arr)//2])








"
114 Write a python program to check if any element appears at least twice in the array using Recursive bubble sort,"def rec_bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swap = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swap = True


    return list_data if not swap else rec_bubble_sort(list_data, length - 1)


arr = [1,2,3,1]
arr = rec_bubble_sort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
116 write a python program to find three numbers with maximum product in the array using recursive bubble sort,"def rec_bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swap = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swap = True


    return list_data if not swap else rec_bubble_sort(list_data, length - 1)


arr = [1,2,3,4]
arr = rec_bubble_sort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
118 write a python program to print an array of the squares of each integer sorted in increasing order of a given array using Recursive Bubble Sort,"def rec_bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swap = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swap = True


    return list_data if not swap else rec_bubble_sort(list_data, length - 1)


arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(rec_bubble_sort(arr))








"
119 write a program to find the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements in an array using Recursive Bubble Sort,"def rec_bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swap = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swap = True


    return list_data if not swap else rec_bubble_sort(list_data, length - 1)


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = rec_bubble_sort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
110 write a python program to find out the number of integers in the array are smaller than each element using recursive bubble sort,"def rec_bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swap = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swap = True


    return list_data if not swap else rec_bubble_sort(list_data, length - 1)


arr = [6,5,4,8]
arr2 = rec_bubble_sort(arr.copy())
print([arr2.index(i) for i in arr])






"
121 write a program to sort an array in ascending order using Recursive quick sort,"def rec_quick_sort(nums_list: list) -> list:
    if len(nums_list) <= 1:
        return nums_list
    else:
        return (rec_quick_sort([el for el in nums_list[1:] if el <= nums_list[0]]) + [nums_list[0]] + rec_quick_sort([el for el in nums_list[1:] if el > nums_list[0]]))


arr = [9,4,3,5,6,1,2,7]
print(rec_quick_sort(arr))








"
122 write a program to sort an array in descending order using Recursive quick sort,"def rec_quick_sort(nums_list: list) -> list:
    if len(nums_list) <= 1:
        return nums_list
    else:
        return (rec_quick_sort([el for el in nums_list[1:] if el <= nums_list[0]]) + [nums_list[0]] + rec_quick_sort([el for el in nums_list[1:] if el > nums_list[0]]))


arr = [9,4,3,5,6,1,2,7]
print(rec_quick_sort(arr)[::-1])








"
124 write a python program to find out if any value appears at least twice in the array using Recursive Quick Sort,"def rec_quick_sort(nums_list: list) -> list:
    if len(nums_list) <= 1:
        return nums_list
    else:
        return (rec_quick_sort([el for el in nums_list[1:] if el <= nums_list[0]]) + [nums_list[0]] + rec_quick_sort([el for el in nums_list[1:] if el > nums_list[0]]))


arr = [1,2,3,1]
arr = rec_quick_sort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
125 write a python program to find the number in an array that is the third distinct maximum using recursive quick sort,"def rec_quick_sort(nums_list: list) -> list:
    if len(nums_list) <= 1:
        return nums_list
    else:
        return (rec_quick_sort([el for el in nums_list[1:] if el <= nums_list[0]]) + [nums_list[0]] + rec_quick_sort([el for el in nums_list[1:] if el > nums_list[0]]))


arr = [2,2,3,1]
arr = rec_quick_sort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
"127 write a program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using Recursive Quick Sort","def rec_quick_sort(nums_list: list) -> list:
    if len(nums_list) <= 1:
        return nums_list
    else:
        return (rec_quick_sort([el for el in nums_list[1:] if el <= nums_list[0]]) + [nums_list[0]] + rec_quick_sort([el for el in nums_list[1:] if el > nums_list[0]]))


arr = [2,1,2]
arr = rec_quick_sort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
129 Write a python program to find the mean of the remaining integers after removing the first 5 percent and the last 5 percent of the elements in an array using recursive quick sort,"def rec_quick_sort(nums_list: list) -> list:
    if len(nums_list) <= 1:
        return nums_list
    else:
        return (rec_quick_sort([el for el in nums_list[1:] if el <= nums_list[0]]) + [nums_list[0]] + rec_quick_sort([el for el in nums_list[1:] if el > nums_list[0]]))


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = rec_quick_sort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
130 write a program to find out how many numbers in the array are smaller than each element using recursive quick sort,"def rec_quick_sort(nums_list: list) -> list:
    if len(nums_list) <= 1:
        return nums_list
    else:
        return (rec_quick_sort([el for el in nums_list[1:] if el <= nums_list[0]]) + [nums_list[0]] + rec_quick_sort([el for el in nums_list[1:] if el > nums_list[0]]))


arr = [6,5,4,8]
arr2 = rec_quick_sort(arr.copy())
print([arr2.index(i) for i in arr])






"
131 write a python program to sort an array in non-decreasing order using Strand Sort,"import operator
def strand_sort(num_arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not num_arr:
        return solution
    sublist = [num_arr.pop(0)]
    for k, item in enumerate(num_arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            num_arr.pop(k)


    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for j, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(j, item)
                    break
            else:
                solution.append(item)


    strand_sort(num_arr, reverse, solution)
    return solution


arr = [9,4,3,5,6,1,2,7]
print(strand_sort(arr))








"
132 write a program to sort an array in descending order using strand sort,"import operator
def strand_sort(num_arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not num_arr:
        return solution
    sublist = [num_arr.pop(0)]
    for k, item in enumerate(num_arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            num_arr.pop(k)


    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for j, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(j, item)
                    break
            else:
                solution.append(item)


    strand_sort(num_arr, reverse, solution)
    return solution


arr = [9,4,3,5,6,1,2,7]
print(strand_sort(arr)[::-1])








"
"133 write a python program to find the integer that appears more than ⌊n / 2⌋ times in the array using strand sort, assume that this element always exists in the array","import operator
def strand_sort(num_arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not num_arr:
        return solution
    sublist = [num_arr.pop(0)]
    for k, item in enumerate(num_arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            num_arr.pop(k)


    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for j, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(j, item)
                    break
            else:
                solution.append(item)


    strand_sort(num_arr, reverse, solution)
    return solution


arr = [2,2,1,1,1,2,2]
arr = strand_sort(arr)
print(arr[len(arr)//2])








"
135 write a Python program to find the third distinct largest number in an array using strand sort,"import operator
def strand_sort(num_arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not num_arr:
        return solution
    sublist = [num_arr.pop(0)]
    for k, item in enumerate(num_arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            num_arr.pop(k)


    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for j, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(j, item)
                    break
            else:
                solution.append(item)


    strand_sort(num_arr, reverse, solution)
    return solution


arr = [2,2,3,1]
arr = strand_sort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
136 write a program to find three numbers in an array whose product is maximum using strand sort,"import operator
def strand_sort(num_arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not num_arr:
        return solution
    sublist = [num_arr.pop(0)]
    for k, item in enumerate(num_arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            num_arr.pop(k)


    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for j, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(j, item)
                    break
            else:
                solution.append(item)


    strand_sort(num_arr, reverse, solution)
    return solution


arr = [1,2,3,4]
arr = strand_sort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
138 write a program to print an array of the squares of each number sorted in non-descending order of a given array using Strand Sort,"import operator
def strand_sort(num_arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not num_arr:
        return solution
    sublist = [num_arr.pop(0)]
    for k, item in enumerate(num_arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            num_arr.pop(k)


    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for j, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(j, item)
                    break
            else:
                solution.append(item)


    strand_sort(num_arr, reverse, solution)
    return solution


arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(strand_sort(arr))








"
140 write a program to find out how many numbers are smaller than each element in the array using Strand Sort,"import operator
def strand_sort(num_arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not num_arr:
        return solution
    sublist = [num_arr.pop(0)]
    for k, item in enumerate(num_arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            num_arr.pop(k)


    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for j, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(j, item)
                    break
            else:
                solution.append(item)


    strand_sort(num_arr, reverse, solution)
    return solution


arr = [6,5,4,8]
arr2 = strand_sort(arr.copy())
print([arr2.index(i) for i in arr])








"
141 Write a program to sort an array in ascending order using pancake sort,"def pancake_sort(nums_list):
    arr_len = len(nums_list)
    while arr_len > 1:
        mi = nums_list.index(max(nums_list[0:arr_len]))
        nums_list = nums_list[mi::-1] + nums_list[mi+1:len(nums_list)]
        nums_list = nums_list[arr_len-1::-1] + nums_list[arr_len:len(nums_list)]
        arr_len -= 1
    return nums_list


arr = [9,4,3,5,6,1,2,7]
print(pancake_sort(arr))








"
142 write a program to sort an array in decreasing order using pancake sort,"def pancake_sort(nums_list):
    arr_len = len(nums_list)
    while arr_len > 1:
        mi = nums_list.index(max(nums_list[0:arr_len]))
        nums_list = nums_list[mi::-1] + nums_list[mi+1:len(nums_list)]
        nums_list = nums_list[arr_len-1::-1] + nums_list[arr_len:len(nums_list)]
        arr_len -= 1
    return nums_list[::-1]


arr = [9,4,3,5,6,1,2,7]
print(pancake_sort(arr))








"
"143 Write a python program to find the element that appears more than half size of an array using pancake sort, assume that this element always exists in the array","def pancake_sort(nums_list):
    arr_len = len(nums_list)
    while arr_len > 1:
        mi = nums_list.index(max(nums_list[0:arr_len]))
        nums_list = nums_list[mi::-1] + nums_list[mi+1:len(nums_list)]
        nums_list = nums_list[arr_len-1::-1] + nums_list[arr_len:len(nums_list)]
        arr_len -= 1
    return nums_list


arr = [2,2,1,1,1,2,2]
arr = pancake_sort(arr)
print(arr[len(arr)//2])








"
144 write a program to check if any value appears at least twice in the array using Pancake Sort,"def pancake_sort(nums_list):
    arr_len = len(nums_list)
    while arr_len > 1:
        mi = nums_list.index(max(nums_list[0:arr_len]))
        nums_list = nums_list[mi::-1] + nums_list[mi+1:len(nums_list)]
        nums_list = nums_list[arr_len-1::-1] + nums_list[arr_len:len(nums_list)]
        arr_len -= 1
    return nums_list


arr = [1,2,3,1]
arr = pancake_sort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
146 write a program to find three numbers whose product is maximum in the array using Pancake Sort,"def pancake_sort(nums_list):
    arr_len = len(nums_list)
    while arr_len > 1:
        mi = nums_list.index(max(nums_list[0:arr_len]))
        nums_list = nums_list[mi::-1] + nums_list[mi+1:len(nums_list)]
        nums_list = nums_list[arr_len-1::-1] + nums_list[arr_len:len(nums_list)]
        arr_len -= 1
    return nums_list


arr = [1,2,3,4]
arr = pancake_sort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"147 Write a python program to find the largest perimeter of a triangle with a non-zero area, with the three lengths from the array using pancake sort","def pancake_sort(nums_list):
    arr_len = len(nums_list)
    while arr_len > 1:
        mi = nums_list.index(max(nums_list[0:arr_len]))
        nums_list = nums_list[mi::-1] + nums_list[mi+1:len(nums_list)]
        nums_list = nums_list[arr_len-1::-1] + nums_list[arr_len:len(nums_list)]
        arr_len -= 1
    return nums_list


arr = [2,1,2]
arr = pancake_sort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
149 write a program to find the mean of the remaining numbers after removing the smallest 5% and the largest 5% of the elements in an array using pancake sort,"def pancake_sort(nums_list):
    arr_len = len(nums_list)
    while arr_len > 1:
        mi = nums_list.index(max(nums_list[0:arr_len]))
        nums_list = nums_list[mi::-1] + nums_list[mi+1:len(nums_list)]
        nums_list = nums_list[arr_len-1::-1] + nums_list[arr_len:len(nums_list)]
        arr_len -= 1
    return nums_list


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = pancake_sort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
152 write a python program to sort an array in descending order using Iterative quick sort,"def partition(arr,low,high):
    i = ( low - 1 )
    x = arr[high]
 
    for j in range(low , high):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[high] = arr[high],arr[i+1]
    return (i+1)


def quickSortIterative(arr,low,high):
 
    size = high - low + 1
    stack = [0] * (size)
 
    top = -1
 
    top = top + 1
    stack[top] = low
    top = top + 1
    stack[top] = high
 
    while top >= 0:
        
        high = stack[top]
        top = top - 1
        low = stack[top]
        top = top - 1
 
        p = partition( arr, low, high )
        
        if p-1 > low:
            top = top + 1
            stack[top] = low
            top = top + 1
            stack[top] = p - 1
 
        if p+1 < high:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = high


arr = [9,4,3,5,6,1,2,7]
quickSortIterative(arr, 0, len(arr)-1)
print(arr[::-1])








"
154 write a python program to check if any element appears at least twice in the array using Iterative Quick Sort,"def partition(arr,low,high):
    i = ( low - 1 )
    x = arr[high]
 
    for j in range(low , high):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[high] = arr[high],arr[i+1]
    return (i+1)


def quickSortIterative(arr,low,high):
 
    size = high - low + 1
    stack = [0] * (size)
 
    top = -1
 
    top = top + 1
    stack[top] = low
    top = top + 1
    stack[top] = high
 
    while top >= 0:
        
        high = stack[top]
        top = top - 1
        low = stack[top]
        top = top - 1
 
        p = partition( arr, low, high )
        
        if p-1 > low:
            top = top + 1
            stack[top] = low
            top = top + 1
            stack[top] = p - 1
 
        if p+1 < high:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = high


arr = [1,2,3,1]
quickSortIterative(arr, 0, len(arr)-1)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
155 write a python program to find the third distinct maximum integer in an array using iterative quick sort,"def partition(arr,low,high):
    i = ( low - 1 )
    x = arr[high]
 
    for j in range(low , high):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[high] = arr[high],arr[i+1]
    return (i+1)


def quickSortIterative(arr,low,high):
 
    size = high - low + 1
    stack = [0] * (size)
 
    top = -1
 
    top = top + 1
    stack[top] = low
    top = top + 1
    stack[top] = high
 
    while top >= 0:
        
        high = stack[top]
        top = top - 1
        low = stack[top]
        top = top - 1
 
        p = partition( arr, low, high )
        
        if p-1 > low:
            top = top + 1
            stack[top] = low
            top = top + 1
            stack[top] = p - 1
 
        if p+1 < high:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = high


arr = [2,2,3,1]
quickSortIterative(arr, 0, len(arr)-1)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
"157 Write a Python program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using Iterative Quick Sort","def partition(arr,low,high):
    i = ( low - 1 )
    x = arr[high]
 
    for j in range(low , high):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[high] = arr[high],arr[i+1]
    return (i+1)


def quickSortIterative(arr,low,high):
 
    size = high - low + 1
    stack = [0] * (size)
 
    top = -1
 
    top = top + 1
    stack[top] = low
    top = top + 1
    stack[top] = high
 
    while top >= 0:
        
        high = stack[top]
        top = top - 1
        low = stack[top]
        top = top - 1
 
        p = partition( arr, low, high )
        
        if p-1 > low:
            top = top + 1
            stack[top] = low
            top = top + 1
            stack[top] = p - 1
 
        if p+1 < high:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = high


arr = [2,1,2]
quickSortIterative(arr, 0, len(arr)-1)
arr = arr[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
158 write a program to print an array of the squares of each number sorted in non-descending order of a given array using Iterative Quick Sort,"def partition(arr,low,high):
    i = ( low - 1 )
    x = arr[high]
 
    for j in range(low , high):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[high] = arr[high],arr[i+1]
    return (i+1)


def quickSortIterative(arr,low,high):
 
    size = high - low + 1
    stack = [0] * (size)
 
    top = -1
 
    top = top + 1
    stack[top] = low
    top = top + 1
    stack[top] = high
 
    while top >= 0:
        
        high = stack[top]
        top = top - 1
        low = stack[top]
        top = top - 1
 
        p = partition( arr, low, high )
        
        if p-1 > low:
            top = top + 1
            stack[top] = low
            top = top + 1
            stack[top] = p - 1
 
        if p+1 < high:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = high


arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
quickSortIterative(arr, 0, len(arr)-1)
print(arr)








"
159 write a program to find the mean of the integers after removing the smallest 5 percent and the largest 5 percent of the elements in the array using Iterative quick sort,"def partition(arr,low,high):
    i = ( low - 1 )
    x = arr[high]
 
    for j in range(low , high):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[high] = arr[high],arr[i+1]
    return (i+1)


def quickSortIterative(arr,low,high):
 
    size = high - low + 1
    stack = [0] * (size)
 
    top = -1
 
    top = top + 1
    stack[top] = low
    top = top + 1
    stack[top] = high
 
    while top >= 0:
        
        high = stack[top]
        top = top - 1
        low = stack[top]
        top = top - 1
 
        p = partition( arr, low, high )
        
        if p-1 > low:
            top = top + 1
            stack[top] = low
            top = top + 1
            stack[top] = p - 1
 
        if p+1 < high:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = high


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
quickSortIterative(arr, 0, len(arr)-1)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
160 write a program to find out how many numbers in the array are smaller than each element using Iterative Quick Sort,"def partition(arr,low,high):
    i = ( low - 1 )
    x = arr[high]
 
    for j in range(low , high):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[high] = arr[high],arr[i+1]
    return (i+1)


def quickSortIterative(arr,low,high):
 
    size = high - low + 1
    stack = [0] * (size)
 
    top = -1
 
    top = top + 1
    stack[top] = low
    top = top + 1
    stack[top] = high
 
    while top >= 0:
        
        high = stack[top]
        top = top - 1
        low = stack[top]
        top = top - 1
 
        p = partition( arr, low, high )
        
        if p-1 > low:
            top = top + 1
            stack[top] = low
            top = top + 1
            stack[top] = p - 1
 
        if p+1 < high:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = high


arr = [6,5,4,8]
arr2 = arr.copy()
quickSortIterative(arr2, 0, len(arr2)-1)
print([arr2.index(i) for i in arr])






"
161 write a python program to sort an array in increasing order using Binary insertion sort,"def binary_search(arr, val, start, end):
    if start == end:
        if arr[start] > val:
            return start
        else:
            return start+1


    if start > end:
        return start
 
    mid = int((start+end)/2)
    if arr[mid] < val:
        return binary_search(arr, val, mid+1, end)
    elif arr[mid] > val:
        return binary_search(arr, val, start, mid-1)
    else:
        return mid
 
def bin_insertion_sort(arr):
    for i in range(1, len(arr)):
        val = arr[i]
        j = binary_search(arr, val, 0, i-1)
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
    return arr


arr = [9,4,3,5,6,1,2,7]
print(bin_insertion_sort(arr))








"
"163 write a program to find the number that appears at least ⌊n / 2⌋ times in an array using Binary Insertion Sort, assume that this element always exists in the array","def binary_search(arr, val, start, end):
    if start == end:
        if arr[start] > val:
            return start
        else:
            return start+1


    if start > end:
        return start
 
    mid = int((start+end)/2)
    if arr[mid] < val:
        return binary_search(arr, val, mid+1, end)
    elif arr[mid] > val:
        return binary_search(arr, val, start, mid-1)
    else:
        return mid
 
def bin_insertion_sort(arr):
    for i in range(1, len(arr)):
        val = arr[i]
        j = binary_search(arr, val, 0, i-1)
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
    return arr


arr = [2,2,1,1,1,2,2]
arr = bin_insertion_sort(arr)
print(arr[len(arr)//2])








"
165 write a python program to find the third distinct largest number in this array using binary insertion sort,"def binary_search(arr, val, start, end):
    if start == end:
        if arr[start] > val:
            return start
        else:
            return start+1


    if start > end:
        return start
 
    mid = int((start+end)/2)
    if arr[mid] < val:
        return binary_search(arr, val, mid+1, end)
    elif arr[mid] > val:
        return binary_search(arr, val, start, mid-1)
    else:
        return mid
 
def bin_insertion_sort(arr):
    for i in range(1, len(arr)):
        val = arr[i]
        j = binary_search(arr, val, 0, i-1)
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
    return arr


arr = [2,2,3,1]
arr = bin_insertion_sort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
166 Write a python program to find three integers with maximum product in the array using Binary Insertion Sort,"def binary_search(arr, val, start, end):
    if start == end:
        if arr[start] > val:
            return start
        else:
            return start+1


    if start > end:
        return start
 
    mid = int((start+end)/2)
    if arr[mid] < val:
        return binary_search(arr, val, mid+1, end)
    elif arr[mid] > val:
        return binary_search(arr, val, start, mid-1)
    else:
        return mid
 
def bin_insertion_sort(arr):
    for i in range(1, len(arr)):
        val = arr[i]
        j = binary_search(arr, val, 0, i-1)
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
    return arr


arr = [1,2,3,4]
arr = bin_insertion_sort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
168 Write a Python program to print an array of the squares of each number sorted in ascending order of a given array using Binary Insertion Sort,"def binary_search(arr, val, start, end):
    if start == end:
        if arr[start] > val:
            return start
        else:
            return start+1


    if start > end:
        return start
 
    mid = int((start+end)/2)
    if arr[mid] < val:
        return binary_search(arr, val, mid+1, end)
    elif arr[mid] > val:
        return binary_search(arr, val, start, mid-1)
    else:
        return mid
 
def bin_insertion_sort(arr):
    for i in range(1, len(arr)):
        val = arr[i]
        j = binary_search(arr, val, 0, i-1)
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
    return arr


arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(bin_insertion_sort(arr))








"
169 write a program to find the mean of the remaining integers in the array after removing the smallest and the largest five percent of the elements using binary insertion sort,"def binary_search(arr, val, start, end):
    if start == end:
        if arr[start] > val:
            return start
        else:
            return start+1


    if start > end:
        return start
 
    mid = int((start+end)/2)
    if arr[mid] < val:
        return binary_search(arr, val, mid+1, end)
    elif arr[mid] > val:
        return binary_search(arr, val, start, mid-1)
    else:
        return mid
 
def bin_insertion_sort(arr):
    for i in range(1, len(arr)):
        val = arr[i]
        j = binary_search(arr, val, 0, i-1)
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
    return arr


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = bin_insertion_sort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
170 write a program to find out how many integers in the array are smaller than each element using Binary insertion sort,"def binary_search(arr, val, start, end):
    if start == end:
        if arr[start] > val:
            return start
        else:
            return start+1


    if start > end:
        return start
 
    mid = int((start+end)/2)
    if arr[mid] < val:
        return binary_search(arr, val, mid+1, end)
    elif arr[mid] > val:
        return binary_search(arr, val, start, mid-1)
    else:
        return mid
 
def bin_insertion_sort(arr):
    for i in range(1, len(arr)):
        val = arr[i]
        j = binary_search(arr, val, 0, i-1)
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
    return arr


arr = [6,5,4,8]
arr2 = bin_insertion_sort(arr.copy())
print([arr2.index(i) for i in arr])






"
171 write a program to sort an array in ascending order using Iterative Merge Sort,"def merge(left, right):
    if not len(left) or not len(right):
        return left or right
 
    result = []
    i, j = 0, 0
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 1
        else:
            result.append(right[j])
            j+= 1
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break
 
    return result
 
def iter_merge_sort(list):
    if len(list) < 2:
        return list
 
    middle = int(len(list)/2)
    left = iter_merge_sort(list[:middle])
    right = iter_merge_sort(list[middle:])
 
    return merge(left, right)


arr = [9,4,3,5,6,1,2,7]
print(iter_merge_sort(arr))








"
172 write a program to sort an array in secreasing order using iterative merge sort,"def merge(left, right):
    if not len(left) or not len(right):
        return left or right
 
    result = []
    i, j = 0, 0
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 1
        else:
            result.append(right[j])
            j+= 1
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break
 
    return result
 
def iter_merge_sort(list):
    if len(list) < 2:
        return list
 
    middle = int(len(list)/2)
    left = iter_merge_sort(list[:middle])
    right = iter_merge_sort(list[middle:])
 
    return merge(left, right)


arr = [9,4,3,5,6,1,2,7]
print(iter_merge_sort(arr)[::-1])








"
174 write a program to check if any value appears more than one time in the array using Iterative Merge Sort,"def merge(left, right):
    if not len(left) or not len(right):
        return left or right
 
    result = []
    i, j = 0, 0
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 1
        else:
            result.append(right[j])
            j+= 1
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break
 
    return result
 
def iter_merge_sort(list):
    if len(list) < 2:
        return list
 
    middle = int(len(list)/2)
    left = iter_merge_sort(list[:middle])
    right = iter_merge_sort(list[middle:])
 
    return merge(left, right)


arr = [1,2,3,1]
arr = iter_merge_sort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
176 write a python program to find the maximum product of three numbers in an array using Iterative Merge Sort,"def merge(left, right):
    if not len(left) or not len(right):
        return left or right
 
    result = []
    i, j = 0, 0
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 1
        else:
            result.append(right[j])
            j+= 1
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break
 
    return result
 
def iter_merge_sort(list):
    if len(list) < 2:
        return list
 
    middle = int(len(list)/2)
    left = iter_merge_sort(list[:middle])
    right = iter_merge_sort(list[middle:])
 
    return merge(left, right)


arr = [1,2,3,4]
arr = iter_merge_sort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"177 write a program to find the maximum perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using Iterative merge sort","def merge(left, right):
    if not len(left) or not len(right):
        return left or right
 
    result = []
    i, j = 0, 0
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 1
        else:
            result.append(right[j])
            j+= 1
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break
 
    return result
 
def iter_merge_sort(list):
    if len(list) < 2:
        return list
 
    middle = int(len(list)/2)
    left = iter_merge_sort(list[:middle])
    right = iter_merge_sort(list[middle:])
 
    return merge(left, right)


arr = [2,1,2]
arr = iter_merge_sort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
179 Write a python program to find the average value of the remaining numbers after removing the smallest 5% and the largest 5% of the elements in an array using Iterative Merge Sort,"def merge(left, right):
    if not len(left) or not len(right):
        return left or right
 
    result = []
    i, j = 0, 0
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 1
        else:
            result.append(right[j])
            j+= 1
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break
 
    return result
 
def iter_merge_sort(list):
    if len(list) < 2:
        return list
 
    middle = int(len(list)/2)
    left = iter_merge_sort(list[:middle])
    right = iter_merge_sort(list[middle:])
 
    return merge(left, right)


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = iter_merge_sort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
180 write a program to find out how many numbers are smaller than each element in the list using iterative merge sort,"def merge(left, right):
    if not len(left) or not len(right):
        return left or right
 
    result = []
    i, j = 0, 0
    while (len(result) < len(left) + len(right)):
        if left[i] < right[j]:
            result.append(left[i])
            i+= 1
        else:
            result.append(right[j])
            j+= 1
        if i == len(left) or j == len(right):
            result.extend(left[i:] or right[j:])
            break
 
    return result
 
def iter_merge_sort(list):
    if len(list) < 2:
        return list
 
    middle = int(len(list)/2)
    left = iter_merge_sort(list[:middle])
    right = iter_merge_sort(list[middle:])
 
    return merge(left, right)


arr = [6,5,4,8]
arr2 = iter_merge_sort(arr.copy())
print([arr2.index(i) for i in arr])






"
181 write a program to sort an array in ascending order using Comb Sort,"def getNextGap(gap):
    gap = (gap * 10)//13
    if gap < 1:
        return 1
    return gap
  
def combSort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap !=1 or swapped == 1:
        gap = getNextGap(gap)
        swapped = False
        for i in range(0, n-gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap]=arr[i + gap], arr[i]
                swapped = True
    return arr


arr = [9,4,3,5,6,1,2,7]
print(combSort(arr))








"
182 write a python program to sort an array in descending order using comb sort,"def getNextGap(gap):
    gap = (gap * 10)//13
    if gap < 1:
        return 1
    return gap
  
def combSort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap !=1 or swapped == 1:
        gap = getNextGap(gap)
        swapped = False
        for i in range(0, n-gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap]=arr[i + gap], arr[i]
                swapped = True
    return arr[::-1]


arr = [9,4,3,5,6,1,2,7]
print(combSort(arr))








"
"183 Write a program to find the element that appears more than half size of the array using Comb Sort, assume that this element always exists in the array","def getNextGap(gap):
    gap = (gap * 10)//13
    if gap < 1:
        return 1
    return gap
  
def combSort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap !=1 or swapped == 1:
        gap = getNextGap(gap)
        swapped = False
        for i in range(0, n-gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap]=arr[i + gap], arr[i]
                swapped = True
    return arr


arr = [2,2,1,1,1,2,2]
arr = combSort(arr)
print(arr[len(arr)//2])








"
185 Write a Python program to find the 3rd distinct largest number in an array using Comb Sort,"def getNextGap(gap):
    gap = (gap * 10)//13
    if gap < 1:
        return 1
    return gap
  
def combSort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap !=1 or swapped == 1:
        gap = getNextGap(gap)
        swapped = False
        for i in range(0, n-gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap]=arr[i + gap], arr[i]
                swapped = True
    return arr


arr = [2,2,3,1]
arr = combSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
"187 write a program to find the maximum perimeter of a triangle with a non-zero area, with the three lengths from an array using comb sort","def getNextGap(gap):
    gap = (gap * 10)//13
    if gap < 1:
        return 1
    return gap
  
def combSort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap !=1 or swapped == 1:
        gap = getNextGap(gap)
        swapped = False
        for i in range(0, n-gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap]=arr[i + gap], arr[i]
                swapped = True
    return arr


arr = [2,1,2]
arr = combSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
188 Write a program to print an array of the squares of each number sorted in increasing order of a given array using Comb Sort,"def getNextGap(gap):
    gap = (gap * 10)//13
    if gap < 1:
        return 1
    return gap
  
def combSort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap !=1 or swapped == 1:
        gap = getNextGap(gap)
        swapped = False
        for i in range(0, n-gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap]=arr[i + gap], arr[i]
                swapped = True
    return arr


arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(combSort(arr))








"
190 write a program to find out how many numbers in the array are smaller than each element using comb sort,"def getNextGap(gap):
    gap = (gap * 10)//13
    if gap < 1:
        return 1
    return gap
  
def combSort(arr):
    n = len(arr)
    gap = n
    swapped = True
    while gap !=1 or swapped == 1:
        gap = getNextGap(gap)
        swapped = False
        for i in range(0, n-gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap]=arr[i + gap], arr[i]
                swapped = True
    return arr


arr = [6,5,4,8]
arr2 = combSort(arr.copy())
print([arr2.index(i) for i in arr])








"
191 Write a python program to sort an array in non-decreasing order using Pigeonhole Sort,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
  
    holes = [0] * size
  
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
  
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
    return a


arr = [9,4,3,5,6,1,2,7]
print(pigeonhole_sort(arr))








"
192 write a program to sort an array in descending order using pigeonhole sort,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
  
    holes = [0] * size
  
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
  
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
    return a[::-1]


arr = [9,4,3,5,6,1,2,7]
print(pigeonhole_sort(arr))








"
"193 write a program to find the element that appears at least half size of the array using Pigeonhole Sort, assume that this element always exists in the array","def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
  
    holes = [0] * size
  
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
  
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
    return a


arr = [2,2,1,1,1,2,2]
arr = pigeonhole_sort(arr)
print(arr[len(arr)//2])








"
194 Write a Python program to check if any value appears at least twice in the array using pigeonhole sort,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
  
    holes = [0] * size
  
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
  
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
    return a


arr = [1,2,3,1]
arr = pigeonhole_sort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
196 write a python program to find three numbers in the array whose product is maximum using Pigeonhole Sort,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
  
    holes = [0] * size
  
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
  
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
    return a


arr = [1,2,3,4]
arr = pigeonhole_sort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
198 write a program to print an array of the squares of each number sorted in ascending order of a given array using Pigeonhole Sort,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
  
    holes = [0] * size
  
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
  
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
    return a


arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(pigeonhole_sort(arr))








"
199 Write a Python program to find the average value of the remaining integers after removing the smallest and the largest 5% of the elements in an array using Pigeonhole Sort,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
  
    holes = [0] * size
  
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
  
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
    return a


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = pigeonhole_sort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
202 Write a python program to sort an array in descending order using Cocktail Sort,"def cocktailSort(a):
    n = len(a)
    swapped = True
    start = 0
    end = n-1
    while (swapped == True):
        swapped = False
        for i in range(start, end):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True
 
        if (swapped == False):
            break
 
        swapped = False
        end = end-1


        for i in range(end-1, start-1, -1):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True


        start = start + 1


arr = [9,4,3,5,6,1,2,7]
cocktailSort(arr)
print(arr[::-1])








"
"203 write a program to find the element that appears more than ⌊n / 2⌋ times in an array using cocktail sort, assume that this element always exists in the array","def cocktailSort(a):
    n = len(a)
    swapped = True
    start = 0
    end = n-1
    while (swapped == True):
        swapped = False
        for i in range(start, end):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True
 
        if (swapped == False):
            break
 
        swapped = False
        end = end-1


        for i in range(end-1, start-1, -1):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True


        start = start + 1


arr = [2,2,1,1,1,2,2]
cocktailSort(arr)
print(arr[len(arr)//2])








"
204 write a Python program to check if any value appears more than once in the array using Cocktail Sort,"def cocktailSort(a):
    n = len(a)
    swapped = True
    start = 0
    end = n-1
    while (swapped == True):
        swapped = False
        for i in range(start, end):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True
 
        if (swapped == False):
            break
 
        swapped = False
        end = end-1


        for i in range(end-1, start-1, -1):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True


        start = start + 1


arr = [1,2,3,1]
cocktailSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
205 write a python program to find the third maximum number which is distinct in an array using Cocktail Sort,"def cocktailSort(a):
    n = len(a)
    swapped = True
    start = 0
    end = n-1
    while (swapped == True):
        swapped = False
        for i in range(start, end):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True
 
        if (swapped == False):
            break
 
        swapped = False
        end = end-1


        for i in range(end-1, start-1, -1):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True


        start = start + 1


arr = [2,2,3,1]
cocktailSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
"207 Write a python program to find the largest perimeter of a triangle with a non-zero area, formed from three of these lengths in an array using cocktail sort","def cocktailSort(a):
    n = len(a)
    swapped = True
    start = 0
    end = n-1
    while (swapped == True):
        swapped = False
        for i in range(start, end):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True
 
        if (swapped == False):
            break
 
        swapped = False
        end = end-1


        for i in range(end-1, start-1, -1):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True


        start = start + 1


arr = [2,1,2]
cocktailSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
209 write a python program to find the mean of the remaining integers after removing the smallest five percent and the largest five percent of the elements in an array using cocktail sort,"def cocktailSort(a):
    n = len(a)
    swapped = True
    start = 0
    end = n-1
    while (swapped == True):
        swapped = False
        for i in range(start, end):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True
 
        if (swapped == False):
            break
 
        swapped = False
        end = end-1


        for i in range(end-1, start-1, -1):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True


        start = start + 1


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
cocktailSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))








"
210 Write a program to find out how many integers in the array are smaller than each element using Cocktail Sort,"def cocktailSort(a):
    n = len(a)
    swapped = True
    start = 0
    end = n-1
    while (swapped == True):
        swapped = False
        for i in range(start, end):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True
 
        if (swapped == False):
            break
 
        swapped = False
        end = end-1


        for i in range(end-1, start-1, -1):
            if (a[i] > a[i + 1]):
                a[i], a[i + 1] = a[i + 1], a[i]
                swapped = True


        start = start + 1


arr = [6,5,4,8]
arr2 = arr.copy()
cocktailSort(arr2)
print([arr2.index(i) for i in arr])






"
211 write a program to sort an array in ascending order using Gnome Sort,"def gnomeSort(arr):
    n = len(arr)
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index-1] = arr[index-1], arr[index]
            index = index - 1
 
    return arr


arr = [9,4,3,5,6,1,2,7]
print(gnomeSort(arr))








"
"213 write a python program to find the element that appears more than ⌊n / 2⌋ times in the array using gnome sort, assume that this element always exists in the array","def gnomeSort(arr):
    n = len(arr)
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index-1] = arr[index-1], arr[index]
            index = index - 1
 
    return arr


arr = [2,2,1,1,1,2,2]
arr = gnomeSort(arr)
print(arr[len(arr)//2])








"
214 write a program to check if any value appears more than once in the array using Gnome Sort,"def gnomeSort(arr):
    n = len(arr)
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index-1] = arr[index-1], arr[index]
            index = index - 1
 
    return arr


arr = [1,2,3,1]
arr = gnomeSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
215 write a program to find the third distinct largest number in this array using gnome sort,"def gnomeSort(arr):
    n = len(arr)
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index-1] = arr[index-1], arr[index]
            index = index - 1
 
    return arr


arr = [2,2,3,1]
arr = gnomeSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
216 write a program to find 3 numbers whose product is the largest in an array using Gnome Sort,"def gnomeSort(arr):
    n = len(arr)
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index-1] = arr[index-1], arr[index]
            index = index - 1
 
    return arr


arr = [1,2,3,4]
arr = gnomeSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
218 Write a program to print an array of the squares of each number sorted in non-decreasing order of a given array using Gnome Sort,"def gnomeSort(arr):
    n = len(arr)
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index-1] = arr[index-1], arr[index]
            index = index - 1
 
    return arr


arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(gnomeSort(arr))








"
220 write a program to find out the number of integers in the array that are smaller than each element using Gnome Sort,"def gnomeSort(arr):
    n = len(arr)
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index-1] = arr[index-1], arr[index]
            index = index - 1
 
    return arr


arr = [6,5,4,8]
arr2 = gnomeSort(arr.copy())
print([arr2.index(i) for i in arr])








"
221 write a python program to sort an array in non-decreasing order using brick sort,"def BrickSort(l):
    n = len(l)
    is_Sorted = 0
    while is_Sorted == 0:
        is_Sorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
                 
        for i in range(0, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
     
    return l


arr = [9,4,3,5,6,1,2,7]
print(BrickSort(arr))








"
222 Write a program to sort an array in descending order using Brick Sort,"def BrickSort(l):
    n = len(l)
    is_Sorted = 0
    while is_Sorted == 0:
        is_Sorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
                 
        for i in range(0, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
     
    return l[::-1]


arr = [9,4,3,5,6,1,2,7]
print(gnomeSort(arr))








"
224 write a program to check if any element appears more than once in the array using Brick Sort,"def BrickSort(l):
    n = len(l)
    is_Sorted = 0
    while is_Sorted == 0:
        is_Sorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
                 
        for i in range(0, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
     
    return l


arr = [1,2,3,1]
arr = BrickSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")








"
225 write a program to find the 3rd distinct largest number in this array using brick sort,"def BrickSort(l):
    n = len(l)
    is_Sorted = 0
    while is_Sorted == 0:
        is_Sorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
                 
        for i in range(0, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
     
    return l


arr = [2,2,3,1]
arr = BrickSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])








"
226 write a program to find three numbers with the largest product in an array using Brick Sort,"def BrickSort(l):
    n = len(l)
    is_Sorted = 0
    while is_Sorted == 0:
        is_Sorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
                 
        for i in range(0, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
     
    return l


arr = [1,2,3,4]
arr = BrickSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))








"
"227 Write a python program to find the maximum perimeter of a triangle with a non-zero area, with the three lengths from an array using brick sort","def BrickSort(l):
    n = len(l)
    is_Sorted = 0
    while is_Sorted == 0:
        is_Sorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
                 
        for i in range(0, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
     
    return l


arr = [2,1,2]
arr = BrickSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])








"
229 write a program to find the average value of the remaining integers in the array after removing the smallest 5 percent and the largest 5 percent of the elements using Brick Sort,"def BrickSort(l):
    n = len(l)
    is_Sorted = 0
    while is_Sorted == 0:
        is_Sorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
                 
        for i in range(0, n-1, 2):
            if l[i] > l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                is_Sorted = 0
     
    return l


arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = BrickSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))




"
232 Write an Odd-Even Sort program in Python to sort an array in descending order,"def oddEvenSort(arr):
    n = len(arr)
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
                 
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
     
    return arr

arr = [9,4,3,5,6,1,2,7]
print(oddEvenSort(arr))




"
235 write a Python program to use odd-even sort to determine the third distinct maximum number in an array,"def oddEvenSort(arr):
    n = len(arr)
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
                 
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
     
    return arr

arr = [2,2,3,1]
arr = oddEvenSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
236 Write python code to locate three values in an array whose products are the highest using the Odd-Even sort,"def oddEvenSort(arr):
    n = len(arr)
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
                 
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
     
    return arr

arr = [1,2,3,4]
arr = oddEvenSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))




"
237 write python code that uses odd-even sort function to determine the largest perimeter of a triangle with a non-zero area generated from three of these lengths,"def oddEvenSort(arr):
    n = len(arr)
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
                 
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
     
    return arr

arr = [2,1,2]
arr = oddEvenSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])




"
238 Write a python program that uses the odd-even sort to display an array of each number's squares sorted in non-decreasing order from a specified array,"def oddEvenSort(arr):
    n = len(arr)
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
                 
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
     
    return arr

arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(oddEvenSort(arr))




"
"239 Use the odd-even sort function to remove the smallest 5% and the largest 5% of the entries in an array, and find the mean of the remaining numbers","def oddEvenSort(arr):
    n = len(arr)
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
                 
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
     
    return arr

arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = oddEvenSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))




"
240 Use the Odd-Even sort function in Python to determine the number of numbers in the array that are smaller than each entry,"def oddEvenSort(arr):
    n = len(arr)
    isSorted = 0
    while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
                 
        for i in range(0, n-1, 2):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                isSorted = 0
     
    return arr

arr = [6,5,4,8]
arr2 = oddEvenSort(arr.copy())
print([arr2.index(i) for i in arr])




"
241 write a python program to use permutation sort to sort an array in ascending order,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def PermutationSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [9,4,3,5,6,1,2,7]
print(PermutationSort(arr))




"
243 Write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using permutation sort assuming that this element always exists in the array,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def PermutationSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [2,2,1,1,1,2,2]
arr = PermutationSort(arr)
print(arr[len(arr)//2])




"
"246 In an array, use permutation sort to identify three numbers with the maximum product","import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def PermutationSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [1,2,3,4]
arr = PermutationSort(arr)
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))




"
"247 Utilizing Permutation Sort, write python code to determine the largest perimeter of a triangle with a non-zero area generated from three of these lengths","import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def PermutationSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [2,1,2]
arr = PermutationSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])




"
"248 Write python code that uses permutation sort to display an array of the squares of each number from a specified array, sorted in non-decreasing order","import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def PermutationSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(PermutationSort(arr))




"
249 write a python program to use permutation sort to determine the mean of the remaining integers after the smallest 5% and largest 5% of the array's entries are deleted,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def PermutationSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = PermutationSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))




"
250 Write a Python program that uses permutation sort to determine the number of numbers in the array that are smaller than each entry,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def PermutationSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [6,5,4,8]
arr2 = PermutationSort(arr.copy())
print([arr2.index(i) for i in arr])




"
251 write python code to use the Bogo Sort algorithm to sort an array in ascending order,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def BogoSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [9,4,3,5,6,1,2,7]
print(BogoSort(arr))




"
252 Write a python program to sort an array using bogo sort in descending order,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def BogoSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [9,4,3,5,6,1,2,7]
print(BogoSort(arr))




"
254 Use bogo sort to determine if any value appears at least twice in an array,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def BogoSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [1,2,3,1]
arr = BogoSort(arr)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
257 Write python code that uses Bogo Sort algorithm to determine the biggest perimeter of a triangle with a non-zero area built from three of these lengths,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def BogoSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [2,1,2]
arr = BogoSort(arr)[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])




"
258 write a python program that uses bogo sort algorithm to print an array of each number's squares sorted in non-decreasing order from a provided array,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def BogoSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(BogoSort(arr))




"
259 write a python program to calculate the average of the remaining integers after deleting the least 5% and largest 5% of array members using Bogo Sort.,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def BogoSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = BogoSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))




"
260 Use the bogo sort algorithm to find out how many numbers in an array are smaller than each element of the array,"import random

def is_sorted(l):
    n = len(l)
    for i in range(0, n-1):
        if (l[i] > l[i+1] ):
            return False
    return True
 
def shuffle(l):
    n = len(l)
    for i in range (0,n):
        r = random.randint(0,n-1)
        l[i], l[r] = l[r], l[i]
 
def BogoSort(l):
    n = len(l)
    while (is_sorted(l)== False):
        shuffle(l)
    return l

arr = [6,5,4,8]
arr2 = BogoSort(arr.copy())
print([arr2.index(i) for i in arr])




"
261 Use cycle sort to sort an array in ascending order in python,"def cycleSort(array):

  for cycleStart in range(0, len(array) - 1):
    item = array[cycleStart]
     
    pos = cycleStart
    for i in range(cycleStart + 1, len(array)):
      if array[i] < item:
        pos += 1
     
    if pos == cycleStart:
      continue
     
    while item == array[pos]:
      pos += 1
    array[pos], item = item, array[pos]
     
    while pos != cycleStart:
       
      pos = cycleStart
      for i in range(cycleStart + 1, len(array)):
        if array[i] < item:
          pos += 1
       
      while item == array[pos]:
        pos += 1
      array[pos], item = item, array[pos]
   
  return array

arr = [9,4,3,5,6,1,2,7]
print(cycleSort(arr))




"
262 Write python code to sort an array in descending order using cycle sort,"def cycleSort(array):

  for cycleStart in range(0, len(array) - 1):
    item = array[cycleStart]
     
    pos = cycleStart
    for i in range(cycleStart + 1, len(array)):
      if array[i] < item:
        pos += 1
     
    if pos == cycleStart:
      continue
     
    while item == array[pos]:
      pos += 1
    array[pos], item = item, array[pos]
     
    while pos != cycleStart:
       
      pos = cycleStart
      for i in range(cycleStart + 1, len(array)):
        if array[i] < item:
          pos += 1
       
      while item == array[pos]:
        pos += 1
      array[pos], item = item, array[pos]
   
  return array

arr = [9,4,3,5,6,1,2,7]
print(cycleSort(arr))




"
"263 write a python program to find the element that appears more than ⌊n / 2⌋ times in an array using Cycle Sort, assume that this element always exists in the array","def cycleSort(array):

  for cycleStart in range(0, len(array) - 1):
    item = array[cycleStart]
     
    pos = cycleStart
    for i in range(cycleStart + 1, len(array)):
      if array[i] < item:
        pos += 1
     
    if pos == cycleStart:
      continue
     
    while item == array[pos]:
      pos += 1
    array[pos], item = item, array[pos]
     
    while pos != cycleStart:
       
      pos = cycleStart
      for i in range(cycleStart + 1, len(array)):
        if array[i] < item:
          pos += 1
       
      while item == array[pos]:
        pos += 1
      array[pos], item = item, array[pos]
   
  return array

arr = [2,2,1,1,1,2,2]
arr = cycleSort(arr)
print(arr[len(arr)//2])




"
265 Write a python program to determine the third distinct maximum number in an array using Cycle Sort Algorithm,"def cycleSort(array):

  for cycleStart in range(0, len(array) - 1):
    item = array[cycleStart]
     
    pos = cycleStart
    for i in range(cycleStart + 1, len(array)):
      if array[i] < item:
        pos += 1
     
    if pos == cycleStart:
      continue
     
    while item == array[pos]:
      pos += 1
    array[pos], item = item, array[pos]
     
    while pos != cycleStart:
       
      pos = cycleStart
      for i in range(cycleStart + 1, len(array)):
        if array[i] < item:
          pos += 1
       
      while item == array[pos]:
        pos += 1
      array[pos], item = item, array[pos]
   
  return array

arr = [2,2,3,1]
arr = cycleSort(arr)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
268 write python code that uses cycle sort algorithm to print an array of each number's squares sorted in non-decreasing order from a given array,"def cycleSort(array):

  for cycleStart in range(0, len(array) - 1):
    item = array[cycleStart]
     
    pos = cycleStart
    for i in range(cycleStart + 1, len(array)):
      if array[i] < item:
        pos += 1
     
    if pos == cycleStart:
      continue
     
    while item == array[pos]:
      pos += 1
    array[pos], item = item, array[pos]
     
    while pos != cycleStart:
       
      pos = cycleStart
      for i in range(cycleStart + 1, len(array)):
        if array[i] < item:
          pos += 1
       
      while item == array[pos]:
        pos += 1
      array[pos], item = item, array[pos]
   
  return array

arr = [-2,-1,0,3,4]
for i in range(len(arr)):
    arr[i] *= arr[i]
print(cycleSort(arr))




"
269 Write a Cycle Sort based python program to find the mean of the remaining integers after the smallest 5% and largest 5% of the array's elements have been eliminated,"def cycleSort(array):

  for cycleStart in range(0, len(array) - 1):
    item = array[cycleStart]
     
    pos = cycleStart
    for i in range(cycleStart + 1, len(array)):
      if array[i] < item:
        pos += 1
     
    if pos == cycleStart:
      continue
     
    while item == array[pos]:
      pos += 1
    array[pos], item = item, array[pos]
     
    while pos != cycleStart:
       
      pos = cycleStart
      for i in range(cycleStart + 1, len(array)):
        if array[i] < item:
          pos += 1
       
      while item == array[pos]:
        pos += 1
      array[pos], item = item, array[pos]
   
  return array

arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
arr = cycleSort(arr)
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))




"
270 Use the Cycle Sort Algorithm to determine the number of numbers in the array that are smaller than each number in the array.,"def cycleSort(array):

  for cycleStart in range(0, len(array) - 1):
    item = array[cycleStart]
     
    pos = cycleStart
    for i in range(cycleStart + 1, len(array)):
      if array[i] < item:
        pos += 1
     
    if pos == cycleStart:
      continue
     
    while item == array[pos]:
      pos += 1
    array[pos], item = item, array[pos]
     
    while pos != cycleStart:
       
      pos = cycleStart
      for i in range(cycleStart + 1, len(array)):
        if array[i] < item:
          pos += 1
       
      while item == array[pos]:
        pos += 1
      array[pos], item = item, array[pos]
   
  return array

arr = [6,5,4,8]
arr2 = cycleSort(arr.copy())
print([arr2.index(i) for i in arr])




"
271 Write python code to sort an array using recursive insertion sort in ascending order,"def insertionSortRecursive(A, n):
    if n <= 1:
        return
 
    insertionSortRecursive(A, n - 1)
 
    last = A[n - 1]
    j = n - 2
 
    while (j >= 0 and A[j] > last):
        A[j + 1] = A[j]
        j = j - 1
    A[j + 1] = last

arr = [9,4,3,5,6,1,2,7]
insertionSortRecursive(arr, len(arr))
print(arr)




"
272 Use the Recursive Insertion Sort algorithm to sort a given array in descending order,"def insertionSortRecursive(A, n):
    if n <= 1:
        return
 
    insertionSortRecursive(A, n - 1)
 
    last = A[n - 1]
    j = n - 2
 
    while (j >= 0 and A[j] > last):
        A[j + 1] = A[j]
        j = j - 1
    A[j + 1] = last

arr = [9,4,3,5,6,1,2,7]
insertionSortRecursive(arr, len(arr))
arr = arr[::-1]
print(arr)




"
"273 Write python code to determine the element that appears more than ⌊n / 2⌋ times in an array using Recursive Insertion Sort, assume that this element always exists in the array","def insertionSortRecursive(A, n):
    if n <= 1:
        return
 
    insertionSortRecursive(A, n - 1)
 
    last = A[n - 1]
    j = n - 2
 
    while (j >= 0 and A[j] > last):
        A[j + 1] = A[j]
        j = j - 1
    A[j + 1] = last

arr = [2,2,1,1,1,2,2]
insertionSortRecursive(arr, len(arr))
print(arr[len(arr)//2])




"
274 write a python program that uses Recursive Insertion Sort algorithm to determine if any value appears at least twice in the array.,"def insertionSortRecursive(A, n):
    if n <= 1:
        return
 
    insertionSortRecursive(A, n - 1)
 
    last = A[n - 1]
    j = n - 2
 
    while (j >= 0 and A[j] > last):
        A[j + 1] = A[j]
        j = j - 1
    A[j + 1] = last

arr = [1,2,3,1]
insertionSortRecursive(arr, len(arr))
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
276 Use recursive insertion sort to determine three numbers whose product is maximum in a given array,"def insertionSortRecursive(A, n):
    if n <= 1:
        return
 
    insertionSortRecursive(A, n - 1)
 
    last = A[n - 1]
    j = n - 2
 
    while (j >= 0 and A[j] > last):
        A[j + 1] = A[j]
        j = j - 1
    A[j + 1] = last

arr = [1,2,3,4]
insertionSortRecursive(arr, len(arr))
print(max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]))




"
279 write python code that uses recursive insertion sort to find the mean of the remaining integers after the smallest 5% and largest 5% of the array's entries have been discarded,"def insertionSortRecursive(A, n):
    if n <= 1:
        return
 
    insertionSortRecursive(A, n - 1)
 
    last = A[n - 1]
    j = n - 2
 
    while (j >= 0 and A[j] > last):
        A[j + 1] = A[j]
        j = j - 1
    A[j + 1] = last

arr = [1,3,3,2,2,2,2,2,2,2,2,3,3,1]
insertionSortRecursive(arr, len(arr))
start = int(len(arr)*5/100)
arr2 = arr[start:len(arr)-start]
print(sum(arr2)/len(arr2))




"
280 write a python program to find out how many numbers in the array are smaller than each element using recursive insertion sort,"def insertionSortRecursive(A, n):
    if n <= 1:
        return
 
    insertionSortRecursive(A, n - 1)
 
    last = A[n - 1]
    j = n - 2
 
    while (j >= 0 and A[j] > last):
        A[j + 1] = A[j]
        j = j - 1
    A[j + 1] = last

arr = [6,5,4,8]
arr2 = arr.copy()
insertionSortRecursive(arr2, len(arr2))
print([arr2.index(i) for i in arr])




"
281 Write python code to sort an array in ascending order using Stooge sort algorithm,"def stoogesort(array, l, h):
 if l >= h:
  return

 if array[l]>array[h]:
  t = array[l]
  array[l] = array[h]
  array[h] = t
 
 if h-l+1 > 2:
  t = (int)((h-l+1)/3)
 
  stoogesort(array, l, (h-t))
 
  stoogesort(array, l+t, (h))
 
  stoogesort(array, l, (h-t))

arr = [9,4,3,5,6,1,2,7]
stoogesort(arr, 0, len(arr)-1)
print(arr)




"
282 Use the stooge sort algorithm to sort an array in descending order,"def stoogesort(array, l, h):
 if l >= h:
  return

 if array[l]>array[h]:
  t = array[l]
  array[l] = array[h]
  array[h] = t
 
 if h-l+1 > 2:
  t = (int)((h-l+1)/3)
 
  stoogesort(array, l, (h-t))
 
  stoogesort(array, l+t, (h))
 
  stoogesort(array, l, (h-t))

arr = [9,4,3,5,6,1,2,7]
stoogesort(arr, 0, len(arr)-1)
arr = arr[::-1]
print(arr)




"
283 Write a python function to find the element that appears more than ⌊n / 2⌋ times in an array using stooge sort assuming that this element always exists in the array,"def stoogesort(array, l, h):
 if l >= h:
  return

 if array[l]>array[h]:
  t = array[l]
  array[l] = array[h]
  array[h] = t
 
 if h-l+1 > 2:
  t = (int)((h-l+1)/3)
 
  stoogesort(array, l, (h-t))
 
  stoogesort(array, l+t, (h))
 
  stoogesort(array, l, (h-t))

arr = [2,2,1,1,1,2,2]
stoogesort(arr, 0, len(arr)-1)
print(arr[len(arr)//2])




"
284 Write python code to check if any value appears at least twice in the array using Stooge Sort Algorithm,"def stoogesort(array, l, h):
 if l >= h:
  return

 if array[l]>array[h]:
  t = array[l]
  array[l] = array[h]
  array[h] = t
 
 if h-l+1 > 2:
  t = (int)((h-l+1)/3)
 
  stoogesort(array, l, (h-t))
 
  stoogesort(array, l+t, (h))
 
  stoogesort(array, l, (h-t))

arr = [1,2,3,1]
stoogesort(arr, 0, len(arr)-1)
for i in range(len(arr)-1):
    if arr[i] == arr[i+1]:
        print(""A value appears at least twice in the array"")
        break
    else:
        if (i+1 == len(arr)-1):
            print(""No value appear twice in the array"")




"
285 write a python program to use stooge sort to locate the third distinct maximum number in this array.,"def stoogesort(array, l, h):
 if l >= h:
  return

 if array[l]>array[h]:
  t = array[l]
  array[l] = array[h]
  array[h] = t
 
 if h-l+1 > 2:
  t = (int)((h-l+1)/3)
 
  stoogesort(array, l, (h-t))
 
  stoogesort(array, l+t, (h))
 
  stoogesort(array, l, (h-t))

arr = [2,2,3,1]
stoogesort(arr, 0, len(arr)-1)
count = 1
prev = arr[0]
for i in range(len(arr)):
    if arr[i] != prev:
        count += 1
        prev = arr[i]
        if count == 3:
            print(arr[i])




"
287 Write a python program that uses the Stooge Sort algorithm to determine the biggest perimeter of a triangle with a non-zero area generated from three of these lengths.,"def stoogesort(array, l, h):
 if l >= h:
  return

 if array[l]>array[h]:
  t = array[l]
  array[l] = array[h]
  array[h] = t
 
 if h-l+1 > 2:
  t = (int)((h-l+1)/3)
 
  stoogesort(array, l, (h-t))
 
  stoogesort(array, l+t, (h))
 
  stoogesort(array, l, (h-t))

arr = [2,1,2]
stoogesort(arr, 0, len(arr)-1)
arr = arr[::-1]
for i in range(len(arr)-2):
    if arr[i] + arr[i+1] > arr[i+2]:
        print(arr[i] + arr[i+1] + arr[i+2])




"
